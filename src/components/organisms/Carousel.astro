---
// src/components/organisms/Carousel.astro
import Button from '../atoms/Button.astro';
import '../../styles/Carousel.scss';

export interface CarouselItem {
  id: string;
  title: string;
  description: string;
  image: string;
  github?: string;
  website?: string;
}

export interface Props {
  items: CarouselItem[];
  showButtons?: boolean;
  carouselId?: string;
}

const { 
  items, 
  showButtons = false, 
  carouselId = 'carousel-' + Math.random().toString(36).substr(2, 9) 
} = Astro.props;
---

<main class="carousel-main" data-carousel-id={carouselId}>
  <!-- Slider with images -->
  <ul class="slider">
    {items.map((item) => (
      <li 
        class="item" 
        style={`background-image: url('${item.image}')`}
        data-id={item.id}
      >
        <div class="item-overlay"></div>
        <div class="card-footer-mini">
          <h3 class="card-title-mini">{item.title}</h3>
          <p class="card-description-mini">{item.description}</p>
        </div>
      </li>
    ))}
  </ul>

  <!-- Content panel with details -->
  <article class="content-panel">
    {items.map((item, index) => (
      <div class={`content-detail ${index === 1 ? 'active' : ''}`} data-id={item.id}>
        <h2 class="content-title">{item.title}</h2>
        <p class="content-description">{item.description}</p>
        {showButtons && (item.github || item.website) && (
          <div class="content-buttons">
            {item.github && (
              <Button 
                href={item.github} 
                icon="github"
                ariaLabel={`View ${item.title} on GitHub`}
              >
                Repository
              </Button>
            )}
            {item.website && (
              <Button 
                href={item.website} 
                variant="secondary" 
                icon="globe"
                ariaLabel={`Visit ${item.title} website`}
              >
                Live Site
              </Button>
            )}
          </div>
        )}
      </div>
    ))}
  </article>

  <!-- Navigation -->
  <nav class="nav">
    <Button variant="icon" class="btn next" ariaLabel="Next slide">
      <ion-icon name="arrow-forward-outline"></ion-icon>
    </Button>
  </nav>
</main>

<script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>

<script type="module">
  /**
   * Initialize a single carousel instance
   * @param {HTMLElement} carouselElement - The carousel container
   */
  function initCarousel(carouselElement) {
    const slider = carouselElement.querySelector('.slider');
    const contentDetails = carouselElement.querySelectorAll('.content-detail');
    const navButton = carouselElement.querySelector('.btn.next');

    if (!slider || !navButton) return;

    /**
     * Update active content based on current slide position
     */
    function updateContent() {
      const items = slider.querySelectorAll('.item');
      const activeItem = items[1]; // Second item is always the active one
      const activeId = activeItem?.getAttribute('data-id');
      
      contentDetails.forEach(content => {
        const contentId = content.getAttribute('data-id');
        content.classList.toggle('active', contentId === activeId);
      });
    }

    /**
     * Handle navigation click event
     * @param {Event} e - Click event
     */
    function handleNavigation(e) {
      const target = e.target.closest('.btn');
      if (!target || !target.classList.contains('next')) return;

      const items = slider.querySelectorAll('.item');
      
      // Hide all content immediately for smooth transition
      contentDetails.forEach(content => {
        content.classList.remove('active');
      });
      
      // Move first item to end (carousel rotation)
      slider.append(items[0]);
      
      // Wait for CSS transition to complete before showing new content
      setTimeout(updateContent, 800);
    }

    // Attach event listeners
    navButton.addEventListener('click', handleNavigation, false);
    
    // Initialize with correct content displayed
    updateContent();
  }

  /**
   * Initialize all carousels on the page
   */
  function initAllCarousels() {
    const carousels = document.querySelectorAll('.carousel-main');
    carousels.forEach(carousel => initCarousel(carousel));
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAllCarousels);
  } else {
    initAllCarousels();
  }

  // Re-initialize when tab changes (for tab-based navigation)
  document.addEventListener('click', (e) => {
    if (e.target.classList.contains('js-sidebar--li')) {
      setTimeout(initAllCarousels, 100);
    }
  });
</script>